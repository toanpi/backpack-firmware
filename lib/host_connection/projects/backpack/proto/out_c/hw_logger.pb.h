/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_HWLOGPKG_HW_LOGGER_PB_H_INCLUDED
#define PB_HWLOGPKG_HW_LOGGER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _HwLogPkg_SystemFault_Type {
    HwLogPkg_SystemFault_Type__NOT_SET = 0,
    HwLogPkg_SystemFault_Type_HARD_FAULT = 1,
    HwLogPkg_SystemFault_Type_BUS_FAULT = 2,
    HwLogPkg_SystemFault_Type_USAGE_FAULT = 3,
    HwLogPkg_SystemFault_Type_MEM_FAULT = 4
} HwLogPkg_SystemFault_Type;

/* Hardware log level */
typedef enum _HwLogPkg_Entry_Level {
    HwLogPkg_Entry_Level__NOT_SET = 0, /* Designates as INFO level */
    HwLogPkg_Entry_Level_TRACE = 1, /* Designates finer-grained informational events than the DEBUG */
    HwLogPkg_Entry_Level_DEBUG = 2, /* Designates fine-grained informational events that are most useful to debug an application. */
    HwLogPkg_Entry_Level_INFO = 3, /* Designates informational messages that highlight the progress of the application. */
    HwLogPkg_Entry_Level_WARN = 4, /* Designates potentially harmful situations. */
    HwLogPkg_Entry_Level_ERROR = 5, /* Designates error events that might still allow the application to continue running. */
    HwLogPkg_Entry_Level_FATAL = 6 /* Designates very severe error events that will presumably lead the application to abort. */
} HwLogPkg_Entry_Level;

/* Struct definitions */
typedef struct _HwLogPkg_SystemFault {
    HwLogPkg_SystemFault_Type type;
    uint32_t pcAddr;
    uint32_t lrAddr;
    uint32_t psrAddr;
} HwLogPkg_SystemFault;

typedef struct _HwLogPkg_Watchdog {
    pb_callback_t threadName;
    uint32_t regLr;
    uint32_t regPc;
    uint32_t threadRegLr;
    uint32_t threadRegPc;
    uint32_t executionTick;
} HwLogPkg_Watchdog;

/* Hardware log timestamp */
typedef struct _HwLogPkg_Timestamp {
    uint64_t milliseconds; /* Number of milliseconds elapsed since the Unix epoch */
    int32_t tzOffset; /* Timezone offset in minutes */
} HwLogPkg_Timestamp;

/* Message type used for debugging and testing */
typedef struct _HwLogPkg_Debug {
    uint32_t val;
    pb_callback_t msg;
} HwLogPkg_Debug;

/* Hardware log entry */
typedef struct _HwLogPkg_Entry {
    uint32_t systemTickMs; /* System tick in miliseconds */
    bool systemTickReset; /* True if the System tick has been reset to zero */
    bool has_timestamp;
    HwLogPkg_Timestamp timestamp; /* Unix timestamp */
    HwLogPkg_Entry_Level level; /* Hardware log level */
    pb_size_t which_type;
    union {
        HwLogPkg_Watchdog watchdog; /* Watchdog log */
        HwLogPkg_SystemFault systemFault; /* System fault log */
        /* List of entries used for debugging only */
        HwLogPkg_Debug debug;
    } type;
} HwLogPkg_Entry;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _HwLogPkg_SystemFault_Type_MIN HwLogPkg_SystemFault_Type__NOT_SET
#define _HwLogPkg_SystemFault_Type_MAX HwLogPkg_SystemFault_Type_MEM_FAULT
#define _HwLogPkg_SystemFault_Type_ARRAYSIZE ((HwLogPkg_SystemFault_Type)(HwLogPkg_SystemFault_Type_MEM_FAULT+1))

#define _HwLogPkg_Entry_Level_MIN HwLogPkg_Entry_Level__NOT_SET
#define _HwLogPkg_Entry_Level_MAX HwLogPkg_Entry_Level_FATAL
#define _HwLogPkg_Entry_Level_ARRAYSIZE ((HwLogPkg_Entry_Level)(HwLogPkg_Entry_Level_FATAL+1))

#define HwLogPkg_SystemFault_type_ENUMTYPE HwLogPkg_SystemFault_Type


#define HwLogPkg_Entry_level_ENUMTYPE HwLogPkg_Entry_Level




/* Initializer values for message structs */
#define HwLogPkg_SystemFault_init_default        {_HwLogPkg_SystemFault_Type_MIN, 0, 0, 0}
#define HwLogPkg_Watchdog_init_default           {{{NULL}, NULL}, 0, 0, 0, 0, 0}
#define HwLogPkg_Entry_init_default              {0, 0, false, HwLogPkg_Timestamp_init_default, _HwLogPkg_Entry_Level_MIN, 0, {HwLogPkg_Watchdog_init_default}}
#define HwLogPkg_Timestamp_init_default          {0, 0}
#define HwLogPkg_Debug_init_default              {0, {{NULL}, NULL}}
#define HwLogPkg_SystemFault_init_zero           {_HwLogPkg_SystemFault_Type_MIN, 0, 0, 0}
#define HwLogPkg_Watchdog_init_zero              {{{NULL}, NULL}, 0, 0, 0, 0, 0}
#define HwLogPkg_Entry_init_zero                 {0, 0, false, HwLogPkg_Timestamp_init_zero, _HwLogPkg_Entry_Level_MIN, 0, {HwLogPkg_Watchdog_init_zero}}
#define HwLogPkg_Timestamp_init_zero             {0, 0}
#define HwLogPkg_Debug_init_zero                 {0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define HwLogPkg_SystemFault_type_tag            1
#define HwLogPkg_SystemFault_pcAddr_tag          2
#define HwLogPkg_SystemFault_lrAddr_tag          3
#define HwLogPkg_SystemFault_psrAddr_tag         4
#define HwLogPkg_Watchdog_threadName_tag         1
#define HwLogPkg_Watchdog_regLr_tag              2
#define HwLogPkg_Watchdog_regPc_tag              3
#define HwLogPkg_Watchdog_threadRegLr_tag        4
#define HwLogPkg_Watchdog_threadRegPc_tag        5
#define HwLogPkg_Watchdog_executionTick_tag      6
#define HwLogPkg_Timestamp_milliseconds_tag      1
#define HwLogPkg_Timestamp_tzOffset_tag          2
#define HwLogPkg_Debug_val_tag                   1
#define HwLogPkg_Debug_msg_tag                   2
#define HwLogPkg_Entry_systemTickMs_tag          1
#define HwLogPkg_Entry_systemTickReset_tag       2
#define HwLogPkg_Entry_timestamp_tag             3
#define HwLogPkg_Entry_level_tag                 4
#define HwLogPkg_Entry_watchdog_tag              10
#define HwLogPkg_Entry_systemFault_tag           11
#define HwLogPkg_Entry_debug_tag                 999

/* Struct field encoding specification for nanopb */
#define HwLogPkg_SystemFault_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, UINT32,   pcAddr,            2) \
X(a, STATIC,   SINGULAR, UINT32,   lrAddr,            3) \
X(a, STATIC,   SINGULAR, UINT32,   psrAddr,           4)
#define HwLogPkg_SystemFault_CALLBACK NULL
#define HwLogPkg_SystemFault_DEFAULT NULL

#define HwLogPkg_Watchdog_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   threadName,        1) \
X(a, STATIC,   SINGULAR, UINT32,   regLr,             2) \
X(a, STATIC,   SINGULAR, UINT32,   regPc,             3) \
X(a, STATIC,   SINGULAR, UINT32,   threadRegLr,       4) \
X(a, STATIC,   SINGULAR, UINT32,   threadRegPc,       5) \
X(a, STATIC,   SINGULAR, UINT32,   executionTick,     6)
#define HwLogPkg_Watchdog_CALLBACK pb_default_field_callback
#define HwLogPkg_Watchdog_DEFAULT NULL

#define HwLogPkg_Entry_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   systemTickMs,      1) \
X(a, STATIC,   SINGULAR, BOOL,     systemTickReset,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timestamp,         3) \
X(a, STATIC,   SINGULAR, UENUM,    level,             4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,watchdog,type.watchdog),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,systemFault,type.systemFault),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,debug,type.debug), 999)
#define HwLogPkg_Entry_CALLBACK NULL
#define HwLogPkg_Entry_DEFAULT NULL
#define HwLogPkg_Entry_timestamp_MSGTYPE HwLogPkg_Timestamp
#define HwLogPkg_Entry_type_watchdog_MSGTYPE HwLogPkg_Watchdog
#define HwLogPkg_Entry_type_systemFault_MSGTYPE HwLogPkg_SystemFault
#define HwLogPkg_Entry_type_debug_MSGTYPE HwLogPkg_Debug

#define HwLogPkg_Timestamp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   milliseconds,      1) \
X(a, STATIC,   SINGULAR, INT32,    tzOffset,          2)
#define HwLogPkg_Timestamp_CALLBACK NULL
#define HwLogPkg_Timestamp_DEFAULT NULL

#define HwLogPkg_Debug_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   val,               1) \
X(a, CALLBACK, SINGULAR, STRING,   msg,               2)
#define HwLogPkg_Debug_CALLBACK pb_default_field_callback
#define HwLogPkg_Debug_DEFAULT NULL

extern const pb_msgdesc_t HwLogPkg_SystemFault_msg;
extern const pb_msgdesc_t HwLogPkg_Watchdog_msg;
extern const pb_msgdesc_t HwLogPkg_Entry_msg;
extern const pb_msgdesc_t HwLogPkg_Timestamp_msg;
extern const pb_msgdesc_t HwLogPkg_Debug_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define HwLogPkg_SystemFault_fields &HwLogPkg_SystemFault_msg
#define HwLogPkg_Watchdog_fields &HwLogPkg_Watchdog_msg
#define HwLogPkg_Entry_fields &HwLogPkg_Entry_msg
#define HwLogPkg_Timestamp_fields &HwLogPkg_Timestamp_msg
#define HwLogPkg_Debug_fields &HwLogPkg_Debug_msg

/* Maximum encoded size of messages (where known) */
/* HwLogPkg_Watchdog_size depends on runtime parameters */
/* HwLogPkg_Entry_size depends on runtime parameters */
/* HwLogPkg_Debug_size depends on runtime parameters */
#define HwLogPkg_SystemFault_size                20
#define HwLogPkg_Timestamp_size                  22

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
