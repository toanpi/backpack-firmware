/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_UWBDEVPKG_UWB_DEV_CONFIG_PB_H_INCLUDED
#define PB_UWBDEVPKG_UWB_DEV_CONFIG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _uwbDevPkg_OpModeCode {
    uwbDevPkg_OpModeCode_TAG = 0,
    uwbDevPkg_OpModeCode_ANCHOR = 1,
    uwbDevPkg_OpModeCode_TAG_ANCHOR = 2
} uwbDevPkg_OpModeCode;

typedef enum _uwbDevPkg_chanelCode {
    uwbDevPkg_chanelCode_CH_UNKOWN = 0,
    uwbDevPkg_chanelCode_CH_1 = 1,
    uwbDevPkg_chanelCode_CH_2 = 2,
    uwbDevPkg_chanelCode_CH_3 = 3,
    uwbDevPkg_chanelCode_CH_4 = 4,
    uwbDevPkg_chanelCode_CH_5 = 5,
    /* CH_6      = 6; */
    uwbDevPkg_chanelCode_CH_7 = 7 /* CH_8      = 8;
 CH_9      = 9;
 CH_10     = 10;
 CH_11     = 11; */
} uwbDevPkg_chanelCode;

typedef enum _uwbDevPkg_rxDetectThresholdCode {
    uwbDevPkg_rxDetectThresholdCode_RDT_NORMAL = 0,
    uwbDevPkg_rxDetectThresholdCode_RDT_LOW = 1
} uwbDevPkg_rxDetectThresholdCode;

/* constants for specifying the (Nominal) mean Pulse Repetition Frequency
 These are defined for direct write (with a shift if necessary) to CHAN_CTRL and TX_FCTRL regs */
typedef enum _uwbDevPkg_pulseRepFreqCode {
    uwbDevPkg_pulseRepFreqCode_DWT_PRF_UNKNOWN = 0,
    uwbDevPkg_pulseRepFreqCode_DWT_PRF_16M = 1, /* !< UWB PRF 16 MHz */
    uwbDevPkg_pulseRepFreqCode_DWT_PRF_64M = 2 /* !< UWB PRF 64 MHz */
} uwbDevPkg_pulseRepFreqCode;

/* ! constants for selecting the bit rate for data TX (and RX)
! These are defined for write (with just a shift) the TX_FCTRL register */
typedef enum _uwbDevPkg_dataRateCode {
    uwbDevPkg_dataRateCode_DWT_BR_110K = 0, /* !< UWB bit rate 110 kbits/s */
    uwbDevPkg_dataRateCode_DWT_BR_850K = 1, /* !< UWB bit rate 850 kbits/s */
    uwbDevPkg_dataRateCode_DWT_BR_6M8 = 2 /* !< UWB bit rate 6.8 Mbits/s */
} uwbDevPkg_dataRateCode;

/* ! constants for specifying TX Preamble length in symbols
! These are defined to allow them be directly written into byte 2 of the TX_FCTRL register
! (i.e. a four bit value destined for bits 20..18 but shifted left by 2 for byte alignment) */
typedef enum _uwbDevPkg_preambleLenCode {
    uwbDevPkg_preambleLenCode_DWT_PLEN_UNKNOWN = 0,
    uwbDevPkg_preambleLenCode_DWT_PLEN_4096 = 12, /* ! Standard preamble length 4096 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_2048 = 40, /* ! Non-standard preamble length 2048 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_1536 = 24, /* ! Non-standard preamble length 1536 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_1024 = 8, /* ! Standard preamble length 1024 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_512 = 52, /* ! Non-standard preamble length 512 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_256 = 36, /* ! Non-standard preamble length 256 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_128 = 20, /* ! Non-standard preamble length 128 symbols */
    uwbDevPkg_preambleLenCode_DWT_PLEN_64 = 4 /* ! Standard preamble length 64 symbols */
} uwbDevPkg_preambleLenCode;

/* ! constants for specifying Preamble Acquisition Chunk (PAC) Size in symbols */
typedef enum _uwbDevPkg_pacSizeCode {
    uwbDevPkg_pacSizeCode_DWT_PAC8 = 0, /* !< PAC  8 (recommended for RX of preamble length  128 and below */
    uwbDevPkg_pacSizeCode_DWT_PAC16 = 1, /* !< PAC 16 (recommended for RX of preamble length  256 */
    uwbDevPkg_pacSizeCode_DWT_PAC32 = 2, /* !< PAC 32 (recommended for RX of preamble length  512 */
    uwbDevPkg_pacSizeCode_DWT_PAC64 = 3 /* !< PAC 64 (recommended for RX of preamble length 1024 and up */
} uwbDevPkg_pacSizeCode;

typedef enum _uwbDevPkg_preambleCode {
    uwbDevPkg_preambleCode_PRECODE_00 = 0,
    uwbDevPkg_preambleCode_PRECODE_01 = 1,
    uwbDevPkg_preambleCode_PRECODE_02 = 2,
    uwbDevPkg_preambleCode_PRECODE_03 = 3,
    uwbDevPkg_preambleCode_PRECODE_04 = 4,
    uwbDevPkg_preambleCode_PRECODE_05 = 5,
    uwbDevPkg_preambleCode_PRECODE_06 = 6,
    uwbDevPkg_preambleCode_PRECODE_07 = 7,
    uwbDevPkg_preambleCode_PRECODE_08 = 8,
    uwbDevPkg_preambleCode_PRECODE_09 = 9,
    uwbDevPkg_preambleCode_PRECODE_10 = 10,
    uwbDevPkg_preambleCode_PRECODE_11 = 11,
    uwbDevPkg_preambleCode_PRECODE_12 = 12,
    uwbDevPkg_preambleCode_PRECODE_13 = 13,
    uwbDevPkg_preambleCode_PRECODE_14 = 14,
    uwbDevPkg_preambleCode_PRECODE_15 = 15,
    uwbDevPkg_preambleCode_PRECODE_16 = 16,
    uwbDevPkg_preambleCode_PRECODE_17 = 17,
    uwbDevPkg_preambleCode_PRECODE_18 = 18,
    uwbDevPkg_preambleCode_PRECODE_19 = 19,
    uwbDevPkg_preambleCode_PRECODE_20 = 20
} uwbDevPkg_preambleCode;

typedef enum _uwbDevPkg_txPowerMode {
    uwbDevPkg_txPowerMode_TX_POWER_CALIBRATED_SMART = 0,
    uwbDevPkg_txPowerMode_TX_POWER_SMART = 1,
    uwbDevPkg_txPowerMode_TX_POWER_MANUAL = 2
} uwbDevPkg_txPowerMode;

/* Struct definitions */
typedef struct _uwbDevPkg_uwbPos {
    float x;
    float y;
    float z;
} uwbDevPkg_uwbPos;

/* *****************************************************************************
 COMMON DEVICE CONFIGURATION
***************************************************************************** */
typedef struct _uwbDevPkg_uwbDevConfig {
    uwbDevPkg_OpModeCode opMode;
    uint32_t address;
    bool has_position;
    uwbDevPkg_uwbPos position;
    uint32_t txDelay;
    uint32_t rxDelay;
    uwbDevPkg_chanelCode channelNumber; /* valid range is 1 to 11 */
    uwbDevPkg_preambleCode preambleCode; /* 00 = use NS code, 1 to 24 selects code */
    uwbDevPkg_pulseRepFreqCode pulseRepFreq; /* NOMINAL_4M, NOMINAL_16M, or NOMINAL_64M */
    uwbDevPkg_dataRateCode dataRate; /* DATA_RATE_1 (110K), DATA_RATE_2 (850K), DATA_RATE_3 (6M81) */
    uwbDevPkg_preambleLenCode preambleLen; /* values expected are 64, (128), (256), (512), 1024, (2048), and 4096 */
    uwbDevPkg_pacSizeCode pacSize;
    uint32_t nsSFD;
    uint32_t sfdTO; /* !< SFD timeout value (in symbols) e.g. preamble length (128) + SFD(8) - PAC + some margin ~ 135us... DWT_SFDTOC_DEF; //default value */
    uwbDevPkg_rxDetectThresholdCode rxDetectThreshold; /* Receiver Detection Threshold */
    uint32_t rangingIntervalMs;
    bool enSmoothingAlgo;
    uint32_t smoothMaxSpeed;
    float smoothE1; /* uint32 panId = 19; */
} uwbDevPkg_uwbDevConfig;

typedef struct _uwbDevPkg_uwbNetworkCreateConfig {
    uint32_t panId;
    uwbDevPkg_OpModeCode opMode; /* chanelCode channelNumber = 3;       // valid range is 1 to 11 */
} uwbDevPkg_uwbNetworkCreateConfig;

/* UWB Smooth Algo */
typedef struct _uwbDevPkg_uwbSmoothAlgoCfg {
    bool enable;
    uint32_t maxSpeed;
    float e1;
    bool has_startPoint;
    uwbDevPkg_uwbPos startPoint;
} uwbDevPkg_uwbSmoothAlgoCfg;

/* Test Mode */
typedef struct _uwbDevPkg_testNodeInfo {
    uint32_t address;
} uwbDevPkg_testNodeInfo;

typedef struct _uwbDevPkg_uwbTestModeCfg {
    bool isEnter;
    bool isExit;
    pb_size_t nodes_count;
    uwbDevPkg_testNodeInfo nodes[10];
} uwbDevPkg_uwbTestModeCfg;

/* Calibration */
typedef struct _uwbDevPkg_uwbCalibCfg {
    /* TX Power */
    uwbDevPkg_txPowerMode mode;
    uint32_t phrPercent;
    uint32_t payloadPercent;
    /* For smart power */
    uint32_t payload500usPercent;
    uint32_t payload250usPercent;
    uint32_t payload125usPercent;
    /* Reset */
    bool needReset;
    float maxTxPowerDB;
} uwbDevPkg_uwbCalibCfg;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _uwbDevPkg_OpModeCode_MIN uwbDevPkg_OpModeCode_TAG
#define _uwbDevPkg_OpModeCode_MAX uwbDevPkg_OpModeCode_TAG_ANCHOR
#define _uwbDevPkg_OpModeCode_ARRAYSIZE ((uwbDevPkg_OpModeCode)(uwbDevPkg_OpModeCode_TAG_ANCHOR+1))

#define _uwbDevPkg_chanelCode_MIN uwbDevPkg_chanelCode_CH_UNKOWN
#define _uwbDevPkg_chanelCode_MAX uwbDevPkg_chanelCode_CH_7
#define _uwbDevPkg_chanelCode_ARRAYSIZE ((uwbDevPkg_chanelCode)(uwbDevPkg_chanelCode_CH_7+1))

#define _uwbDevPkg_rxDetectThresholdCode_MIN uwbDevPkg_rxDetectThresholdCode_RDT_NORMAL
#define _uwbDevPkg_rxDetectThresholdCode_MAX uwbDevPkg_rxDetectThresholdCode_RDT_LOW
#define _uwbDevPkg_rxDetectThresholdCode_ARRAYSIZE ((uwbDevPkg_rxDetectThresholdCode)(uwbDevPkg_rxDetectThresholdCode_RDT_LOW+1))

#define _uwbDevPkg_pulseRepFreqCode_MIN uwbDevPkg_pulseRepFreqCode_DWT_PRF_UNKNOWN
#define _uwbDevPkg_pulseRepFreqCode_MAX uwbDevPkg_pulseRepFreqCode_DWT_PRF_64M
#define _uwbDevPkg_pulseRepFreqCode_ARRAYSIZE ((uwbDevPkg_pulseRepFreqCode)(uwbDevPkg_pulseRepFreqCode_DWT_PRF_64M+1))

#define _uwbDevPkg_dataRateCode_MIN uwbDevPkg_dataRateCode_DWT_BR_110K
#define _uwbDevPkg_dataRateCode_MAX uwbDevPkg_dataRateCode_DWT_BR_6M8
#define _uwbDevPkg_dataRateCode_ARRAYSIZE ((uwbDevPkg_dataRateCode)(uwbDevPkg_dataRateCode_DWT_BR_6M8+1))

#define _uwbDevPkg_preambleLenCode_MIN uwbDevPkg_preambleLenCode_DWT_PLEN_UNKNOWN
#define _uwbDevPkg_preambleLenCode_MAX uwbDevPkg_preambleLenCode_DWT_PLEN_512
#define _uwbDevPkg_preambleLenCode_ARRAYSIZE ((uwbDevPkg_preambleLenCode)(uwbDevPkg_preambleLenCode_DWT_PLEN_512+1))

#define _uwbDevPkg_pacSizeCode_MIN uwbDevPkg_pacSizeCode_DWT_PAC8
#define _uwbDevPkg_pacSizeCode_MAX uwbDevPkg_pacSizeCode_DWT_PAC64
#define _uwbDevPkg_pacSizeCode_ARRAYSIZE ((uwbDevPkg_pacSizeCode)(uwbDevPkg_pacSizeCode_DWT_PAC64+1))

#define _uwbDevPkg_preambleCode_MIN uwbDevPkg_preambleCode_PRECODE_00
#define _uwbDevPkg_preambleCode_MAX uwbDevPkg_preambleCode_PRECODE_20
#define _uwbDevPkg_preambleCode_ARRAYSIZE ((uwbDevPkg_preambleCode)(uwbDevPkg_preambleCode_PRECODE_20+1))

#define _uwbDevPkg_txPowerMode_MIN uwbDevPkg_txPowerMode_TX_POWER_CALIBRATED_SMART
#define _uwbDevPkg_txPowerMode_MAX uwbDevPkg_txPowerMode_TX_POWER_MANUAL
#define _uwbDevPkg_txPowerMode_ARRAYSIZE ((uwbDevPkg_txPowerMode)(uwbDevPkg_txPowerMode_TX_POWER_MANUAL+1))


#define uwbDevPkg_uwbDevConfig_opMode_ENUMTYPE uwbDevPkg_OpModeCode
#define uwbDevPkg_uwbDevConfig_channelNumber_ENUMTYPE uwbDevPkg_chanelCode
#define uwbDevPkg_uwbDevConfig_preambleCode_ENUMTYPE uwbDevPkg_preambleCode
#define uwbDevPkg_uwbDevConfig_pulseRepFreq_ENUMTYPE uwbDevPkg_pulseRepFreqCode
#define uwbDevPkg_uwbDevConfig_dataRate_ENUMTYPE uwbDevPkg_dataRateCode
#define uwbDevPkg_uwbDevConfig_preambleLen_ENUMTYPE uwbDevPkg_preambleLenCode
#define uwbDevPkg_uwbDevConfig_pacSize_ENUMTYPE uwbDevPkg_pacSizeCode
#define uwbDevPkg_uwbDevConfig_rxDetectThreshold_ENUMTYPE uwbDevPkg_rxDetectThresholdCode

#define uwbDevPkg_uwbNetworkCreateConfig_opMode_ENUMTYPE uwbDevPkg_OpModeCode




#define uwbDevPkg_uwbCalibCfg_mode_ENUMTYPE uwbDevPkg_txPowerMode


/* Initializer values for message structs */
#define uwbDevPkg_uwbPos_init_default            {0, 0, 0}
#define uwbDevPkg_uwbDevConfig_init_default      {_uwbDevPkg_OpModeCode_MIN, 0, false, uwbDevPkg_uwbPos_init_default, 0, 0, _uwbDevPkg_chanelCode_MIN, _uwbDevPkg_preambleCode_MIN, _uwbDevPkg_pulseRepFreqCode_MIN, _uwbDevPkg_dataRateCode_MIN, _uwbDevPkg_preambleLenCode_MIN, _uwbDevPkg_pacSizeCode_MIN, 0, 0, _uwbDevPkg_rxDetectThresholdCode_MIN, 0, 0, 0, 0}
#define uwbDevPkg_uwbNetworkCreateConfig_init_default {0, _uwbDevPkg_OpModeCode_MIN}
#define uwbDevPkg_uwbSmoothAlgoCfg_init_default  {0, 0, 0, false, uwbDevPkg_uwbPos_init_default}
#define uwbDevPkg_testNodeInfo_init_default      {0}
#define uwbDevPkg_uwbTestModeCfg_init_default    {0, 0, 0, {uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default, uwbDevPkg_testNodeInfo_init_default}}
#define uwbDevPkg_uwbCalibCfg_init_default       {_uwbDevPkg_txPowerMode_MIN, 0, 0, 0, 0, 0, 0, 0}
#define uwbDevPkg_uwbPos_init_zero               {0, 0, 0}
#define uwbDevPkg_uwbDevConfig_init_zero         {_uwbDevPkg_OpModeCode_MIN, 0, false, uwbDevPkg_uwbPos_init_zero, 0, 0, _uwbDevPkg_chanelCode_MIN, _uwbDevPkg_preambleCode_MIN, _uwbDevPkg_pulseRepFreqCode_MIN, _uwbDevPkg_dataRateCode_MIN, _uwbDevPkg_preambleLenCode_MIN, _uwbDevPkg_pacSizeCode_MIN, 0, 0, _uwbDevPkg_rxDetectThresholdCode_MIN, 0, 0, 0, 0}
#define uwbDevPkg_uwbNetworkCreateConfig_init_zero {0, _uwbDevPkg_OpModeCode_MIN}
#define uwbDevPkg_uwbSmoothAlgoCfg_init_zero     {0, 0, 0, false, uwbDevPkg_uwbPos_init_zero}
#define uwbDevPkg_testNodeInfo_init_zero         {0}
#define uwbDevPkg_uwbTestModeCfg_init_zero       {0, 0, 0, {uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero, uwbDevPkg_testNodeInfo_init_zero}}
#define uwbDevPkg_uwbCalibCfg_init_zero          {_uwbDevPkg_txPowerMode_MIN, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define uwbDevPkg_uwbPos_x_tag                   1
#define uwbDevPkg_uwbPos_y_tag                   2
#define uwbDevPkg_uwbPos_z_tag                   3
#define uwbDevPkg_uwbDevConfig_opMode_tag        1
#define uwbDevPkg_uwbDevConfig_address_tag       2
#define uwbDevPkg_uwbDevConfig_position_tag      3
#define uwbDevPkg_uwbDevConfig_txDelay_tag       4
#define uwbDevPkg_uwbDevConfig_rxDelay_tag       5
#define uwbDevPkg_uwbDevConfig_channelNumber_tag 6
#define uwbDevPkg_uwbDevConfig_preambleCode_tag  7
#define uwbDevPkg_uwbDevConfig_pulseRepFreq_tag  8
#define uwbDevPkg_uwbDevConfig_dataRate_tag      9
#define uwbDevPkg_uwbDevConfig_preambleLen_tag   10
#define uwbDevPkg_uwbDevConfig_pacSize_tag       11
#define uwbDevPkg_uwbDevConfig_nsSFD_tag         12
#define uwbDevPkg_uwbDevConfig_sfdTO_tag         13
#define uwbDevPkg_uwbDevConfig_rxDetectThreshold_tag 14
#define uwbDevPkg_uwbDevConfig_rangingIntervalMs_tag 15
#define uwbDevPkg_uwbDevConfig_enSmoothingAlgo_tag 16
#define uwbDevPkg_uwbDevConfig_smoothMaxSpeed_tag 17
#define uwbDevPkg_uwbDevConfig_smoothE1_tag      18
#define uwbDevPkg_uwbNetworkCreateConfig_panId_tag 1
#define uwbDevPkg_uwbNetworkCreateConfig_opMode_tag 2
#define uwbDevPkg_uwbSmoothAlgoCfg_enable_tag    1
#define uwbDevPkg_uwbSmoothAlgoCfg_maxSpeed_tag  2
#define uwbDevPkg_uwbSmoothAlgoCfg_e1_tag        3
#define uwbDevPkg_uwbSmoothAlgoCfg_startPoint_tag 4
#define uwbDevPkg_testNodeInfo_address_tag       1
#define uwbDevPkg_uwbTestModeCfg_isEnter_tag     1
#define uwbDevPkg_uwbTestModeCfg_isExit_tag      2
#define uwbDevPkg_uwbTestModeCfg_nodes_tag       3
#define uwbDevPkg_uwbCalibCfg_mode_tag           1
#define uwbDevPkg_uwbCalibCfg_phrPercent_tag     2
#define uwbDevPkg_uwbCalibCfg_payloadPercent_tag 3
#define uwbDevPkg_uwbCalibCfg_payload500usPercent_tag 4
#define uwbDevPkg_uwbCalibCfg_payload250usPercent_tag 5
#define uwbDevPkg_uwbCalibCfg_payload125usPercent_tag 6
#define uwbDevPkg_uwbCalibCfg_needReset_tag      7
#define uwbDevPkg_uwbCalibCfg_maxTxPowerDB_tag   8

/* Struct field encoding specification for nanopb */
#define uwbDevPkg_uwbPos_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define uwbDevPkg_uwbPos_CALLBACK NULL
#define uwbDevPkg_uwbPos_DEFAULT NULL

#define uwbDevPkg_uwbDevConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    opMode,            1) \
X(a, STATIC,   SINGULAR, UINT32,   address,           2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,          3) \
X(a, STATIC,   SINGULAR, UINT32,   txDelay,           4) \
X(a, STATIC,   SINGULAR, UINT32,   rxDelay,           5) \
X(a, STATIC,   SINGULAR, UENUM,    channelNumber,     6) \
X(a, STATIC,   SINGULAR, UENUM,    preambleCode,      7) \
X(a, STATIC,   SINGULAR, UENUM,    pulseRepFreq,      8) \
X(a, STATIC,   SINGULAR, UENUM,    dataRate,          9) \
X(a, STATIC,   SINGULAR, UENUM,    preambleLen,      10) \
X(a, STATIC,   SINGULAR, UENUM,    pacSize,          11) \
X(a, STATIC,   SINGULAR, UINT32,   nsSFD,            12) \
X(a, STATIC,   SINGULAR, UINT32,   sfdTO,            13) \
X(a, STATIC,   SINGULAR, UENUM,    rxDetectThreshold,  14) \
X(a, STATIC,   SINGULAR, UINT32,   rangingIntervalMs,  15) \
X(a, STATIC,   SINGULAR, BOOL,     enSmoothingAlgo,  16) \
X(a, STATIC,   SINGULAR, UINT32,   smoothMaxSpeed,   17) \
X(a, STATIC,   SINGULAR, FLOAT,    smoothE1,         18)
#define uwbDevPkg_uwbDevConfig_CALLBACK NULL
#define uwbDevPkg_uwbDevConfig_DEFAULT NULL
#define uwbDevPkg_uwbDevConfig_position_MSGTYPE uwbDevPkg_uwbPos

#define uwbDevPkg_uwbNetworkCreateConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   panId,             1) \
X(a, STATIC,   SINGULAR, UENUM,    opMode,            2)
#define uwbDevPkg_uwbNetworkCreateConfig_CALLBACK NULL
#define uwbDevPkg_uwbNetworkCreateConfig_DEFAULT NULL

#define uwbDevPkg_uwbSmoothAlgoCfg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enable,            1) \
X(a, STATIC,   SINGULAR, UINT32,   maxSpeed,          2) \
X(a, STATIC,   SINGULAR, FLOAT,    e1,                3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  startPoint,        4)
#define uwbDevPkg_uwbSmoothAlgoCfg_CALLBACK NULL
#define uwbDevPkg_uwbSmoothAlgoCfg_DEFAULT NULL
#define uwbDevPkg_uwbSmoothAlgoCfg_startPoint_MSGTYPE uwbDevPkg_uwbPos

#define uwbDevPkg_testNodeInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   address,           1)
#define uwbDevPkg_testNodeInfo_CALLBACK NULL
#define uwbDevPkg_testNodeInfo_DEFAULT NULL

#define uwbDevPkg_uwbTestModeCfg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     isEnter,           1) \
X(a, STATIC,   SINGULAR, BOOL,     isExit,            2) \
X(a, STATIC,   REPEATED, MESSAGE,  nodes,             3)
#define uwbDevPkg_uwbTestModeCfg_CALLBACK NULL
#define uwbDevPkg_uwbTestModeCfg_DEFAULT NULL
#define uwbDevPkg_uwbTestModeCfg_nodes_MSGTYPE uwbDevPkg_testNodeInfo

#define uwbDevPkg_uwbCalibCfg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              1) \
X(a, STATIC,   SINGULAR, UINT32,   phrPercent,        2) \
X(a, STATIC,   SINGULAR, UINT32,   payloadPercent,    3) \
X(a, STATIC,   SINGULAR, UINT32,   payload500usPercent,   4) \
X(a, STATIC,   SINGULAR, UINT32,   payload250usPercent,   5) \
X(a, STATIC,   SINGULAR, UINT32,   payload125usPercent,   6) \
X(a, STATIC,   SINGULAR, BOOL,     needReset,         7) \
X(a, STATIC,   SINGULAR, FLOAT,    maxTxPowerDB,      8)
#define uwbDevPkg_uwbCalibCfg_CALLBACK NULL
#define uwbDevPkg_uwbCalibCfg_DEFAULT NULL

extern const pb_msgdesc_t uwbDevPkg_uwbPos_msg;
extern const pb_msgdesc_t uwbDevPkg_uwbDevConfig_msg;
extern const pb_msgdesc_t uwbDevPkg_uwbNetworkCreateConfig_msg;
extern const pb_msgdesc_t uwbDevPkg_uwbSmoothAlgoCfg_msg;
extern const pb_msgdesc_t uwbDevPkg_testNodeInfo_msg;
extern const pb_msgdesc_t uwbDevPkg_uwbTestModeCfg_msg;
extern const pb_msgdesc_t uwbDevPkg_uwbCalibCfg_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define uwbDevPkg_uwbPos_fields &uwbDevPkg_uwbPos_msg
#define uwbDevPkg_uwbDevConfig_fields &uwbDevPkg_uwbDevConfig_msg
#define uwbDevPkg_uwbNetworkCreateConfig_fields &uwbDevPkg_uwbNetworkCreateConfig_msg
#define uwbDevPkg_uwbSmoothAlgoCfg_fields &uwbDevPkg_uwbSmoothAlgoCfg_msg
#define uwbDevPkg_testNodeInfo_fields &uwbDevPkg_testNodeInfo_msg
#define uwbDevPkg_uwbTestModeCfg_fields &uwbDevPkg_uwbTestModeCfg_msg
#define uwbDevPkg_uwbCalibCfg_fields &uwbDevPkg_uwbCalibCfg_msg

/* Maximum encoded size of messages (where known) */
#define uwbDevPkg_testNodeInfo_size              6
#define uwbDevPkg_uwbCalibCfg_size               39
#define uwbDevPkg_uwbDevConfig_size              85
#define uwbDevPkg_uwbNetworkCreateConfig_size    8
#define uwbDevPkg_uwbPos_size                    15
#define uwbDevPkg_uwbSmoothAlgoCfg_size          30
#define uwbDevPkg_uwbTestModeCfg_size            84

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
