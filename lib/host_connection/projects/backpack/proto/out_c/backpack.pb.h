/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_BACKPACKPKG_BACKPACK_PB_H_INCLUDED
#define PB_BACKPACKPKG_BACKPACK_PB_H_INCLUDED
#include <pb.h>
#include "uwb-dev.pb.h"
#include "ble-central.pb.h"
#include "sensor.pb.h"
#include "collector.pb.h"
#include "file-transfer.pb.h"
#include "algorithm.pb.h"
#include "command.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* ******************************************************************************
  COMMON BACKPACK DEVICE INFO
****************************************************************************** */
typedef enum _backpackPkg_prototype {
    backpackPkg_prototype_UWB_DEV = 0,
    backpackPkg_prototype_BLE_DEV = 1,
    backpackPkg_prototype_SUBGHZ_NODE = 2
} backpackPkg_prototype;

/* Struct definitions */
typedef struct _backpackPkg_backpackDevInfo {
    backpackPkg_prototype prototype;
    uint64_t address;
} backpackPkg_backpackDevInfo;

/* ******************************************************************************
  BACKPACK DEVICE MESSENGER
****************************************************************************** */
typedef struct _backpackPkg_backpackMsg {
    /* Header */
    uint32_t version;
    uint32_t srcAddr;
    uint32_t desAddr;
    pb_size_t which_type;
    union {
        /* UWB Message */
        uwbDevPkg_uwbDevMsg uwbDevMsg;
        /* Sensor Message */
        sensorPkg_sensorMsg sensorMsg;
        /* Device Info */
        backpackPkg_backpackDevInfo devInfo;
        /* Ble Message */
        bleCentralPkg_bleCentralMsg bleMsg;
        /* Collector */
        collectorPkg_collectorMsg collectorMsg;
        /* File transfer */
        fileTransferPkg_fileMsg fileMsg;
        /* Algorithm message */
        algoPkg_algoMsg algoMsg;
        /* Command message */
        cmdPkg_cmdMsg cmdMsg;
    } type;
} backpackPkg_backpackMsg;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _backpackPkg_prototype_MIN backpackPkg_prototype_UWB_DEV
#define _backpackPkg_prototype_MAX backpackPkg_prototype_SUBGHZ_NODE
#define _backpackPkg_prototype_ARRAYSIZE ((backpackPkg_prototype)(backpackPkg_prototype_SUBGHZ_NODE+1))

#define backpackPkg_backpackDevInfo_prototype_ENUMTYPE backpackPkg_prototype



/* Initializer values for message structs */
#define backpackPkg_backpackDevInfo_init_default {_backpackPkg_prototype_MIN, 0}
#define backpackPkg_backpackMsg_init_default     {0, 0, 0, 0, {uwbDevPkg_uwbDevMsg_init_default}}
#define backpackPkg_backpackDevInfo_init_zero    {_backpackPkg_prototype_MIN, 0}
#define backpackPkg_backpackMsg_init_zero        {0, 0, 0, 0, {uwbDevPkg_uwbDevMsg_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define backpackPkg_backpackDevInfo_prototype_tag 1
#define backpackPkg_backpackDevInfo_address_tag  2
#define backpackPkg_backpackMsg_version_tag      1
#define backpackPkg_backpackMsg_srcAddr_tag      2
#define backpackPkg_backpackMsg_desAddr_tag      3
#define backpackPkg_backpackMsg_uwbDevMsg_tag    10
#define backpackPkg_backpackMsg_sensorMsg_tag    11
#define backpackPkg_backpackMsg_devInfo_tag      12
#define backpackPkg_backpackMsg_bleMsg_tag       13
#define backpackPkg_backpackMsg_collectorMsg_tag 14
#define backpackPkg_backpackMsg_fileMsg_tag      15
#define backpackPkg_backpackMsg_algoMsg_tag      16
#define backpackPkg_backpackMsg_cmdMsg_tag       17

/* Struct field encoding specification for nanopb */
#define backpackPkg_backpackDevInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    prototype,         1) \
X(a, STATIC,   SINGULAR, UINT64,   address,           2)
#define backpackPkg_backpackDevInfo_CALLBACK NULL
#define backpackPkg_backpackDevInfo_DEFAULT NULL

#define backpackPkg_backpackMsg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   version,           1) \
X(a, STATIC,   SINGULAR, UINT32,   srcAddr,           2) \
X(a, STATIC,   SINGULAR, UINT32,   desAddr,           3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,uwbDevMsg,type.uwbDevMsg),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,sensorMsg,type.sensorMsg),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,devInfo,type.devInfo),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,bleMsg,type.bleMsg),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,collectorMsg,type.collectorMsg),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,fileMsg,type.fileMsg),  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,algoMsg,type.algoMsg),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,cmdMsg,type.cmdMsg),  17)
#define backpackPkg_backpackMsg_CALLBACK NULL
#define backpackPkg_backpackMsg_DEFAULT NULL
#define backpackPkg_backpackMsg_type_uwbDevMsg_MSGTYPE uwbDevPkg_uwbDevMsg
#define backpackPkg_backpackMsg_type_sensorMsg_MSGTYPE sensorPkg_sensorMsg
#define backpackPkg_backpackMsg_type_devInfo_MSGTYPE backpackPkg_backpackDevInfo
#define backpackPkg_backpackMsg_type_bleMsg_MSGTYPE bleCentralPkg_bleCentralMsg
#define backpackPkg_backpackMsg_type_collectorMsg_MSGTYPE collectorPkg_collectorMsg
#define backpackPkg_backpackMsg_type_fileMsg_MSGTYPE fileTransferPkg_fileMsg
#define backpackPkg_backpackMsg_type_algoMsg_MSGTYPE algoPkg_algoMsg
#define backpackPkg_backpackMsg_type_cmdMsg_MSGTYPE cmdPkg_cmdMsg

extern const pb_msgdesc_t backpackPkg_backpackDevInfo_msg;
extern const pb_msgdesc_t backpackPkg_backpackMsg_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define backpackPkg_backpackDevInfo_fields &backpackPkg_backpackDevInfo_msg
#define backpackPkg_backpackMsg_fields &backpackPkg_backpackMsg_msg

/* Maximum encoded size of messages (where known) */
#if defined(uwbDevPkg_uwbDevMsg_size) && defined(bleCentralPkg_bleCentralMsg_size) && defined(fileTransferPkg_fileMsg_size)
union backpackPkg_backpackMsg_type_size_union {char f10[(6 + uwbDevPkg_uwbDevMsg_size)]; char f13[(6 + bleCentralPkg_bleCentralMsg_size)]; char f15[(6 + fileTransferPkg_fileMsg_size)]; char f0[612];};
#endif
#define backpackPkg_backpackDevInfo_size         13
#if defined(uwbDevPkg_uwbDevMsg_size) && defined(bleCentralPkg_bleCentralMsg_size) && defined(fileTransferPkg_fileMsg_size)
#define backpackPkg_backpackMsg_size             (18 + sizeof(union backpackPkg_backpackMsg_type_size_union))
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
